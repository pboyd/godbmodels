// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: characters.sql

package sqlc

import (
	"context"
)

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters WHERE id = ?
`

// DeleteCharacter removes a character from the database.
func (q *Queries) DeleteCharacter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, id)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT id, name, actor_id FROM characters WHERE id = ?
`

// GetCharacter loads a character from the database by ID.
func (q *Queries) GetCharacter(ctx context.Context, id int64) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, id)
	var i Character
	err := row.Scan(&i.ID, &i.Name, &i.ActorID)
	return i, err
}

const insertCharacter = `-- name: insertCharacter :one
INSERT INTO characters (actor_id, name) VALUES (?, ?) RETURNING id
`

type insertCharacterParams struct {
	ActorID int64
	Name    string
}

// insertCharacter creates a new character record.
func (q *Queries) insertCharacter(ctx context.Context, arg insertCharacterParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertCharacter, arg.ActorID, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listAllCharacters = `-- name: listAllCharacters :many
SELECT id, name, actor_id FROM characters
`

// listAllCharacters returns all characters.
func (q *Queries) listAllCharacters(ctx context.Context) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listAllCharacters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(&i.ID, &i.Name, &i.ActorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharactersByActor = `-- name: listCharactersByActor :many
SELECT id, name, actor_id FROM characters WHERE actor_id = ?
`

// listCharactersByActor returns all characters played a given actor.
func (q *Queries) listCharactersByActor(ctx context.Context, actorID int64) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersByActor, actorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(&i.ID, &i.Name, &i.ActorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharactersByActorName = `-- name: listCharactersByActorName :many
SELECT c.id, c.name, c.actor_id FROM characters c JOIN actors a ON c.actor_id = a.id WHERE LOWER(a.name) LIKE '%' || LOWER(?) || '%'
`

// listCharactersByActorName returns all characters played by an actor with a
// name matching the given name.
func (q *Queries) listCharactersByActorName(ctx context.Context, lower string) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersByActorName, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(&i.ID, &i.Name, &i.ActorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharactersByName = `-- name: listCharactersByName :many
SELECT id, name, actor_id FROM characters WHERE LOWER(name) LIKE '%' || LOWER(?) || '%'
`

// listCharactersByName returns all characters with a name matching the given
// name.
func (q *Queries) listCharactersByName(ctx context.Context, lower string) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersByName, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(&i.ID, &i.Name, &i.ActorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharactersByScene = `-- name: listCharactersByScene :many
SELECT c.id, c.name, c.actor_id FROM characters c JOIN scene_characters sc ON c.id = sc.character_id WHERE sc.scene_id = ?
`

// listCharactersByScene returns all characters in a given scene.
func (q *Queries) listCharactersByScene(ctx context.Context, sceneID int64) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersByScene, sceneID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(&i.ID, &i.Name, &i.ActorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacter = `-- name: updateCharacter :exec
UPDATE characters SET actor_id = ?, name = ? WHERE id = ?
`

type updateCharacterParams struct {
	ActorID int64
	Name    string
	ID      int64
}

// updateCharacter updates a character's information.
func (q *Queries) updateCharacter(ctx context.Context, arg updateCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateCharacter, arg.ActorID, arg.Name, arg.ID)
	return err
}
